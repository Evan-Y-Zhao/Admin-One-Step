{"version":3,"sources":["pages/Login.js"],"names":["Adminlogin","onChange","key","value","_this","props","handleChange","Object","C_Users_chenguang_xie_Documents_matchtool_webapi_src_main_webapp_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_6__","helperText","error","handleLogin","event","preventDefault","username","password","trim","login","this","isAuthenticated","history","replace","antd_es_message__WEBPACK_IMPORTED_MODULE_5__","_this2","_this$props","react__WEBPACK_IMPORTED_MODULE_12___default","a","createElement","className","onSubmit","concat","antd_es_input__WEBPACK_IMPORTED_MODULE_3__","placeholder","name","target","allowClear","type","antd_es_button__WEBPACK_IMPORTED_MODULE_1__","htmlType","onClick","PureComponent","mapDispatchToProps","connect","state","auth"],"mappings":"0OAOMA,6MAiBJC,SAAW,SAACC,EAAKC,GACfC,EAAKC,MAAMC,aAAXC,OAAAC,EAAA,EAAAD,CAAA,GACGL,EAAM,CACLC,QACAM,WAAY,GACZC,OAAO,QAMbC,YAAc,SAACC,GACbA,EAAMC,iBAEN,IAAMC,EAAWV,EAAKC,MAAMS,SAASX,MAC/BY,EAAWX,EAAKC,MAAMU,SAASZ,MAgBrC,MAdwB,KAApBW,EAASE,QACXZ,EAAKC,MAAMC,aAAa,CACtBQ,SAAU,CAAEJ,OAAO,EAAMD,WAAY,2BAGjB,KAApBM,EAASC,QACXZ,EAAKC,MAAMC,aAAa,CACtBS,SAAU,CAAEL,OAAO,EAAMD,WAAY,0BAIrCK,GAAYC,GACdX,EAAKC,MAAMY,MAAM,CAAEH,WAAUC,cAExB,sFA7C4B,YAA/BG,KAAKb,MAAMc,gBAEbD,KAAKb,MAAMe,QAAQC,QAAQ,uBACa,UAA/BH,KAAKb,MAAMc,iBACpBG,EAAA,EAAQZ,MAAM,iDA4CT,IAAAa,EAAAL,KAAAM,EAEwBN,KAAKb,MAA5BS,EAFDU,EAECV,SAAUC,EAFXS,EAEWT,SAElB,OACEU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBAAf,6BAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAAf,SAGAH,EAAAC,EAAAC,cAAA,QAAME,SAAUX,KAAKP,aACnBc,EAAAC,EAAAC,cAAA,OAAKC,UAAS,eAAAE,OAAiBhB,EAASJ,MAAQ,YAAc,KAC5De,EAAAC,EAAAC,cAAA,SAAOC,UAAU,eAAjB,aACAH,EAAAC,EAAAC,cAAAI,EAAA,GACEC,YAAY,8BACZ7B,MAAOW,EAASX,MAChB8B,KAAK,WACLhC,SAAU,SAACW,GAAD,OAAWW,EAAKtB,SAAS,WAAYW,EAAMsB,OAAO/B,QAC5DgC,YAAU,KAIZrB,EAASJ,MAAQe,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAAoBd,EAASL,YAAoB,KAEnFgB,EAAAC,EAAAC,cAAA,OAAKC,UAAS,eAAAE,OAAiBf,EAASL,MAAQ,YAAc,KAC5De,EAAAC,EAAAC,cAAA,SAAOC,UAAU,eAAjB,YACAH,EAAAC,EAAAC,cAAAI,EAAA,GACEC,YAAY,wBACZ7B,MAAOY,EAASZ,MAChBiC,KAAK,WACLH,KAAK,eACLhC,SAAU,SAACW,GAAD,OAAWW,EAAKtB,SAAS,WAAYW,EAAMsB,OAAO/B,QAC5DgC,YAAU,KAIZpB,EAASL,MAAQe,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAAoBb,EAASN,YAAoB,KAEnFgB,EAAAC,EAAAC,cAAAU,EAAA,GAAQD,KAAK,UAAUE,SAAS,SAASV,UAAU,oBAAoBW,QAASrB,KAAKP,aAArF,kBA3Fe6B,iBAiHnBC,EAAqB,CACzBxB,UACAX,kBAGaoC,sBAdS,SAAAC,GAAS,IACvBC,EAASD,EAATC,KACR,MAAO,CACLzB,gBAAiByB,EAAKzB,gBACtBL,SAAU8B,EAAK9B,SACfC,SAAU6B,EAAK7B,WASqB0B,EAAzBC,CAA6C1C","file":"static/js/6.99858c7f.chunk.js","sourcesContent":["import React, { PureComponent } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport {\r\n  Input, Button, message\r\n} from 'antd'\r\nimport { login, handleChange } from 'Actions/auth'\r\n\r\nclass Adminlogin extends PureComponent {\r\n\r\n  componentDidMount () {\r\n    if (this.props.isAuthenticated === 'success') {\r\n      // logged in, let's show redirect if any, or show home\r\n      this.props.history.replace('/financeARClearance')\r\n    } else if (this.props.isAuthenticated === 'error') {\r\n      message.error('Error occurs')\r\n    }\r\n  }\r\n\r\n  /**\r\n     * Listen on the changes on fields.\r\n     *\r\n     * @param  Key The corresponding key.\r\n     * @param  Value Assign the value that user is typing.\r\n     */\r\n  onChange = (key, value) => {\r\n    this.props.handleChange({\r\n      [key]: {\r\n        value,\r\n        helperText: '',\r\n        error: false\r\n      }\r\n    })\r\n  }\r\n\r\n  // Fire the login action if fields meet the validations, otherwise display error messages.\r\n  handleLogin = (event) => {\r\n    event.preventDefault()\r\n\r\n    const username = this.props.username.value\r\n    const password = this.props.password.value\r\n\r\n    if (username.trim() === '') {\r\n      this.props.handleChange({\r\n        username: { error: true, helperText: 'User name is required' },\r\n      })\r\n    }\r\n    if (password.trim() === '') {\r\n      this.props.handleChange({\r\n        password: { error: true, helperText: 'Password is required' },\r\n      })\r\n    }\r\n\r\n    if (username && password) {\r\n      this.props.login({ username, password })\r\n    }\r\n    return false;\r\n  }\r\n\r\n  render() {\r\n    // const { adminUser } = this.props;\r\n    const { username, password } = this.props\r\n\r\n    return (\r\n      <div className='admin-login'>\r\n        <div className=\"login-title-first\">\r\n          Finance AR Clearance Tool\r\n        </div>\r\n        <div className=\"login-title-second\">\r\n          Login\r\n        </div>\r\n        <form onSubmit={this.handleLogin}>\r\n          <div className={`admin-input ${username.error ? 'has-error' : ''}`}>\r\n            <label className=\"input-title\">User Name</label>\r\n            <Input\r\n              placeholder='Please input your user name'\r\n              value={username.value}\r\n              name=\"username\"\r\n              onChange={(event) => this.onChange('username', event.target.value)}\r\n              allowClear\r\n            />\r\n          </div>\r\n          {\r\n            username.error ? <div className='admin-error-text'>{username.helperText}</div> : null\r\n          }\r\n          <div className={`admin-input ${password.error ? 'has-error' : ''}`}>\r\n            <label className=\"input-title\">Password</label>\r\n            <Input\r\n              placeholder='Please input password'\r\n              value={password.value}\r\n              type='password'\r\n              name=\"userPassword\"\r\n              onChange={(event) => this.onChange('password', event.target.value)}\r\n              allowClear\r\n            />\r\n          </div>\r\n          {\r\n            password.error ? <div className='admin-error-text'>{password.helperText}</div> : null\r\n          }\r\n          <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\" onClick={this.handleLogin}>\r\n            Login\r\n          </Button>\r\n\r\n\r\n        </form>\r\n\r\n      </div >\r\n    );\r\n  }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  const { auth } = state;\r\n  return {\r\n    isAuthenticated: auth.isAuthenticated,\r\n    username: auth.username,\r\n    password: auth.password\r\n  }\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  login,\r\n  handleChange\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Adminlogin)\r\n\r\n"],"sourceRoot":""}